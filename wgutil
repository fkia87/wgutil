#!/bin/bash
# shellcheck disable=SC1090,SC2068
# shellcheck source=/dev/null

# MAINIF is the name of server's main interface which is connected to the internet.
# DIR is related to clients. (client's folder)
# INTERFACE is the name of wireguard interface.

# TO DO:
# -> add firewall function on "delif"

[[ -f /etc/profile ]] && . /etc/profile

set -euo pipefail

BASEDIR='/etc/wireguard'
DEFAULTIF="wg0"
declare -i PORT

readparams() {
    case $1 in
        addif)
            read -r -p "Enter IP for interface: " IFLOCALIP
            while ip -4 a | grep 'inet ' | awk '{print $2}' | grep "$IFLOCALIP" > /dev/null
            do
                echo -e "\nIP address in use. Try a different one.\n"
                read -r -p "Enter IP for interface: " IFLOCALIP
            done
            read -r -p "Enter listening port: " PORT
            while ss --no-header -4lun | awk '{print$4}' | cut -d : -f2 | grep $PORT > /dev/null \
            || ! ((1024 < PORT && PORT < 65536))
            do
                echo -e "\nBusy or invalid port. Try a different port number.\n"
                read -r -p "Enter listening port: " PORT
            done
            ;;
        adduser)
            tmpip=$(calculate_ip)
            [[ $tmpip == "range_full" ]] && err "\nIP range full. Please delete a user." "1"
            read -r -p "Enter client Wireguard IP: [$tmpip] " LOCALIP
            while grep "$LOCALIP" $BASEDIR/"${INTERFACE}".conf > /dev/null && [[ -n $LOCALIP ]]
            do
                echo -e "\nIP address in use. Try a different one.\n"
                read -r -p "Enter client Wireguard IP: [$tmpip] " LOCALIP
            done
            [[ -z $LOCALIP ]] && LOCALIP=$tmpip
            ;;
    esac
}

calculate_ip() {
    declare -i o1 o2 o3 o4
    IFIP=$(grep 'Address' $BASEDIR/"$INTERFACE".conf | awk '{print$3}' | cut -d / -f1)
    IFS=. read -r o1 o2 o3 o4 <<< "$IFIP"
    ((o4++))
    while grep $o1.$o2.$o3.$o4/ $BASEDIR/"$INTERFACE".conf > /dev/null
    do
        ((o4++))
    done
    (( o4 > 254 )) && { echo "range_full"; return; }
    echo "$o1.$o2.$o3.$o4"
}

setvars() {
    mkdir -p "$DIR"
    if ! test -f "$DIR"/"$USERNAME".key; then
        wg genkey | tee "$DIR"/"$USERNAME".key | wg pubkey | \
        tee "$DIR"/"$USERNAME".key.pub > /dev/null
    else
        echo -e "${YELLOW}\nA private key already exists in \"$DIR\" for given username. We'll use that key."
        echo -e "${YELLOW}If you prefer a new key please manually remove the file: \"$DIR/$USERNAME.key\""
        echo -e "${YELLOW}then try again.\n${DECOLOR}"
        wg pubkey < "$DIR"/"$USERNAME".key | tee "$DIR"/"$USERNAME".key.pub > /dev/null
    fi

    CLIENT_PRIVATE_KEY=$(cat "$DIR"/"$USERNAME".key)
    CLIENT_PUBLIC_KEY=$(cat "$DIR"/"$USERNAME".key.pub)
    SERVER_PUBLIC_KEY=$(wg show "$INTERFACE"| grep "public key" | cut -d ':' -f 2 | sed 's/^\s//')
    [[ $SERVER_PUBLIC_KEY != "" ]] || err "${RED}Error fetching server's public key.${DECOLOR}" "1"
    PORT=$(wg show "$INTERFACE" | grep "listening port" | cut -d ':' -f 2 | sed 's/^\s*//')
}

genconfs() {
    cat << EOF > "$DIR"/"${USERNAME}".conf
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = ${LOCALIP}/32
DNS = $(getifip "$INTERFACE")

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
AllowedIPs = 0.0.0.0/0
Endpoint = $(getifip "$MAINIF"):$PORT
EOF

    cat << EOF >> $BASEDIR/"$INTERFACE".conf
[Peer]
# $USERNAME
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = ${LOCALIP}/32
EOF
    qrencode -s 6 -o "$DIR"/"$USERNAME".png < "$DIR"/"$USERNAME".conf
}

genif() {
    mkdir -p $BASEDIR; chmod 0700 $BASEDIR
    if [[ -f $BASEDIR/$INTERFACE/$INTERFACE.privatekey ]]; then
        echo -e "${YELLOW}\nA private key already exists in \"$BASEDIR\" for given interface. We'll use that key."
        echo -e "${YELLOW}If you prefer a new key please manually remove the file: \"$BASEDIR/$INTERFACE/$INTERFACE.privatekey\""
        echo -e "${YELLOW}then try again.\n${DECOLOR}"
    else
        mkdir -p $BASEDIR/"$INTERFACE"
        umask 077; wg genkey | tee $BASEDIR/"$INTERFACE"/"$INTERFACE".privatekey | \
            wg pubkey > $BASEDIR/"$INTERFACE"/"$INTERFACE".publickey
    fi
    cat << EOF > $BASEDIR/"$INTERFACE".conf
[Interface]
Address = ${IFLOCALIP}/24
ListenPort = ${PORT}
PrivateKey = $(cat $BASEDIR/"$INTERFACE"/"$INTERFACE".privatekey)
PostUp = iptables -I INPUT -p udp --dport $PORT -j ACCEPT; iptables -I FORWARD -o %i -j ACCEPT; iptables -I FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $MAINIF -j MASQUERADE
PostDown = iptables -D INPUT -p udp --dport $PORT -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $MAINIF -j MASQUERADE
EOF
}

usage() {
    echo -e "\nUsage: ${0##*/} <adduser|deluser> USERNAME INTERFACE" >&2
    echo -e "       ${0##*/} <addif|delif> INTERFACE" >&2
    echo -e "       ${0##*/} lsif" >&2
    echo -e "       ${0##*/} lsuser [INTERFACE]" >&2
    echo -e "       ${0##*/} getuser USERNAME [INTERFACE]" >&2
    echo -e "       ${0##*/} install\n" >&2
}

removeuser() {
    ln=$(grep -nrm 1 "$USERNAME" "$BASEDIR/$INTERFACE.conf" | cut -d : -f 1)
    if [[ -n $ln ]]; then
        sed -i "$((ln-1)),$((ln+2))d" "$BASEDIR/$INTERFACE.conf"
    fi
}

checkname() {
    if ! grep -e "# ${USERNAME}$" "$BASEDIR/$INTERFACE.conf"; then
        echo ok
    fi
}

checkinterface() {
    if [[ -f $BASEDIR/$INTERFACE.conf ]]; then
        echo "exists"
    fi
}

startmsg() {
    find_mainif
    while :
    do
        echo -en "\nInterface ${BLUE}[$MAINIF]${DECOLOR} with IP address ${BLUE}[$(getifip "$MAINIF")]${DECOLOR}"
        echo -e " is selected as main external interface for this server."
        read -r -p "Do you wish to continue? [Y/n]" START
        echo ""
        if [[ $START =~ ^[yY] ]] || [[ $START == "" ]]; then break; fi
        [[ $START =~ ^[nN] ]] && exit
    done
}

checkinstall() {
    wg -v > /dev/null 2>&1 || { echo -e "${RED}\n\"Wireguard\" is not installed." >&2;
        echo -e "${RED}You can run this command to install it:\n" >&2;
        err "${RED}       $0 install\n${DECOLOR}" "1"; }
}

checkinstall_qrencode() {
    qrencode -V > /dev/null 2>&1 || \
        err "${RED}\n\"qrencode\" is not installed.\n${DECOLOR}" "1"
}

###############################################################################################################

if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    usage
    exit
elif [[ $1 != "install" ]] \
    && [[ $1 != "lsif" ]] \
    && [[ $1 != "lsuser" ]] \
    && [[ $# -lt 2 ]]; then
    err "${RED}\nInsufficient parameters.\n${DECOLOR}" "1"
fi

unset command_not_found_handle

checkuser

case $1 in
    adduser | deluser)
        checkinstall
        USERNAME=$2
        INTERFACE=${3:-$DEFAULTIF}
        
        # Check if all parameters are present:
        if [[ -z $USERNAME ]] || [[ -z $INTERFACE ]]; then
            usage
            exit 1
        fi
        # Check if given INTERFACE exists:
        [[ $(checkinterface) == "exists" ]] || err "${RED}Invalid Interface.${DECOLOR}" "1"
        
        DIR="$BASEDIR/$INTERFACE/clients/$USERNAME"
        
        case $1 in
            adduser)
                checkinstall_qrencode
                startmsg
                readparams "$1"
                [[ $(checkname) == "ok" ]] || err "${RED}Username exists.${DECOLOR}" "1"
                setvars
                genconfs
                systemctl reload-or-restart wg-quick@"$INTERFACE".service
                echo -e "${GREEN}\nUser added successfully!${DECOLOR}"
                echo -e "${GREEN}\nUse this config on your client side:\n${DECOLOR}"
                cat "$DIR/$USERNAME.conf"
                echo -e "${GREEN}\nor this QR code:\n${DECOLOR}"
                qrencode -t UTF8 < "$DIR/$USERNAME.conf"
                ;;
            deluser)
                read -r -p "Do you want to delete all user's configuration files? [y/N] " DEL
                if [[ $DEL == "y" ]] || [[ $DEL == "Y" ]]; then
                    rm -rf "$DIR";
                else
                    echo -e "\nConfiguration files are remaining on the system.\n"
                fi
                removeuser
                systemctl reload-or-restart wg-quick@"$INTERFACE".service
                echo -e "${GREEN}User \"$USERNAME\" removed successfully.${DECOLOR}"
                ;;
        esac
        ;;
    lsuser)
        tmp_output=/tmp/wg.txt
        INTERFACE=${2:-$DEFAULTIF}
        WG_COLOR_MODE=always wg show "$INTERFACE" > "$tmp_output" || { rm -f "$tmp_output"; exit 1; }
        while IFS= read -r user; do
            sed -i "s/$(cat "$user"/*.key.pub | sed 's/\//\\\//g')/${user##*/}/g" "$tmp_output"
            # sed 's/\//\\\//g' replaces all '/' characters with '\/'  so the parent sed does work properly.
        done < <(find "$BASEDIR/$INTERFACE/clients/" -maxdepth 1 -mindepth 1)
        cat "$tmp_output"; rm -f "$tmp_output"
        checkinstall
        ;;
    getuser)
        checkinstall_qrencode
        USERNAME=$2
        INTERFACE=${3:-$DEFAULTIF}
        DIR="$BASEDIR/$INTERFACE/clients/$USERNAME"

        [[ ! -d $DIR ]] && err "${RED}User doesn't exist for given interface.${DECOLOR}" "1"

        echo -e "${GREEN}\nUse this config on your client side:\n${DECOLOR}"
        cat "$DIR"/"${USERNAME}".conf
        echo -e "${GREEN}\nor this QR code:\n${DECOLOR}"
        qrencode -t UTF8 < "$DIR/$USERNAME.conf"
        checkinstall
        ;;
    addif | delif)
        checkinstall
        INTERFACE=$2
        if [[ -z $INTERFACE ]]; then
            usage
            exit 1
        fi
        case $1 in
            addif)
                startmsg
                readparams "$1"
                ! [[ $(checkinterface) == "exists" ]] || err "Interface exists." "1"
                genif
                systemctl enable wg-quick@"$INTERFACE".service --now
                echo -e "${GREEN}\nSuccessfully configured.\"$INTERFACE\"\n"
                echo -en "${GREEN}\nInstall and configure ${BGREEN}\"Bind\"${GREEN} to listen on newly created interface"
                echo -e " if necessary.\n${DECOLOR}"
                ;;
            delif)
                systemctl stop wg-quick@"$INTERFACE".service
                read -r -p "Do you want to delete all interface configuration files? [y/N] " DEL
                if [[ $DEL =~ ^[yY] ]]; then
                    rm -rf "$BASEDIR/${INTERFACE:?}"
                else
                    echo -e "\nConfiguration files are remaining on the system."
                    echo -e "You can remove key files located in \"$BASEDIR\" manually.\n"
                fi
                rm -f "$BASEDIR/$INTERFACE.conf"
                echo -e "${GREEN}\nSuccessfully removed \"$INTERFACE\".${DECOLOR}"
                ;;
        esac
        ;;
    lsif)
        checkinstall
        wg show interfaces
        ;;
    install)
        wg -v > /dev/null 2>&1 && err "${YELLOW}\nAlready installed!\n${DECOLOR}" "1"
        enable_ipforward
        case $(os) in
            centos)
                install_pkg epel-release
                install_pkg elrepo-release
                install_pkg yum-plugin-elrepo
                install_pkg kmod-wireguard
                install_pkg wireguard-tools
                ;;
            ubuntu | debian)
                install_pkg wireguard
                ;;
            fedora | almalinux)
                install_pkg wireguard-tools
                ;;
            *)
                echo -e "${RED}Automatic installation is not supported for your distribution." >&2
                echo -e "${RED}Please follow instructions here to install \"Wireguard\" manually:" >&2
                err "${RED}https://www.wireguard.com/install/\n${DECOLOR}" "1"
                ;;
        esac
        ;;
    backup)
        INTERFACE=${2:-$DEFAULTIF}
        current_dir="$PWD"
        cd "$BASEDIR" || err "Couldn't access $BASEDIR" "1"
        tar -cf "${HOSTNAME}_${INTERFACE}.backup.tar ./$INTERFACE"* && \
        echo -e "Backup created: $BASEDIR/${HOSTNAME}_${INTERFACE}.backup.tar"
        cd "$current_dir" || exit 1
        ;;
    restore)
        BACKUP_FILE=$2
        [[ $(file -b --extension "$BACKUP_FILE") == "tar/gtar" ]] || \
            err "Invalid backup file: $BACKUP_FILE" "1"
        current_dir="$PWD"
        cp "$BACKUP_FILE" "$BASEDIR"
        cd "$BASEDIR" || err "Couldn't access $BASEDIR" "1"
        tar -xf "$BASEDIR/${BACKUP_FILE##*/}"
        rm "$BASEDIR/${BACKUP_FILE##*/}"
        echo "Restored successfully."
        cd "$current_dir" || exit 1
        ;;
    *)
        usage
        exit 1
        ;;
esac