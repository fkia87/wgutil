#!/bin/bash

# MAINIF is the name of server's main interface which is connected to the internet.
# DIR is related to clients. (client's folder)
# INTERFACE is the name of wireguard interface.

source resources/pkg_management
source resources/os
source resources/network
source resources/bash_colors

BASEDIR='/etc/wireguard'
declare -i PORT

function readparams {
case $1 in
addif)
    read -p "Enter IP for interface: " IFLOCALIP
    while ip -4 a | grep 'inet ' | awk {'print $2'} | grep $IFLOCALIP > /dev/null
    do
        echo -e "\nIP address in use. Try a different one.\n"
        read -p "Enter IP for interface: " IFLOCALIP
    done
    read -p "Enter listening port: " PORT
    while ss --no-header -4lun | awk {'print$4'} | cut -d : -f2 | grep $PORT > /dev/null \
    || ! ((1024 < PORT && PORT < 65536))
    do
        echo -e "\nBusy or invalid port. Try a different port number.\n"
        read -p "Enter listening port: " PORT
    done
    ;;
adduser)
    tmpip=$(calculate_ip)
    [[ $tmpip == "range_full" ]] && { echo -e "\nIP range full. Please delete a user." >&2; exit 1; }
    read -p "Enter client Wireguard IP: [$tmpip] " LOCALIP
    while grep "$LOCALIP" $BASEDIR/${INTERFACE}.conf > /dev/null && ! [[ -z $LOCALIP ]]
    do
        echo -e "\nIP address in use. Try a different one.\n"
        read -p "Enter client Wireguard IP: [$tmpip] " LOCALIP
    done
    [[ -z $LOCALIP ]] && LOCALIP=$tmpip
    ;;
esac
}

function calculate_ip {
declare -i o1 o2 o3 o4
IFIP=$(grep 'Address' $BASEDIR/${INTERFACE}.conf | awk {'print$3'} | cut -d / -f1)
IFS=. read -r o1 o2 o3 o4 <<< $IFIP
((o4++))
while grep $o1.$o2.$o3.$o4/ $BASEDIR/${INTERFACE}.conf > /dev/null
do
    ((o4++))
done
(( $o4 > 254 )) && { echo "range_full"; return; }
echo "$o1.$o2.$o3.$o4"
}

function setvars {
mkdir -p $DIR

if ! test -f $DIR/${USERNAME}.key; then
    wg genkey | tee $DIR/${USERNAME}.key | wg pubkey | \
    tee $DIR/${USERNAME}.key.pub > /dev/null
else
    echo -e "${YELLOW}\nA private key already exists in \"$DIR\" for given username. We'll use that key."
    echo -e "${YELLOW}If you prefer a new key please manually remove the file: \"$DIR/${USERNAME}.key\""
    echo -e "${YELLOW}then try again.\n${DECOLOR}"
    cat $DIR/${USERNAME}.key | wg pubkey | tee $DIR/${USERNAME}.key.pub > /dev/null
fi

CLIENT_PRIVATE_KEY=$(cat $DIR/${USERNAME}.key)
CLIENT_PUBLIC_KEY=$(cat $DIR/${USERNAME}.key.pub)
SERVER_PUBLIC_KEY=$(wg | grep "public key" | cut -d ':' -f 2 | sed 's/^\s//')
[[ $SERVER_PUBLIC_KEY != "" ]] || { echo -e "${RED}Error fetching server's public key.${DECOLOR}"; exit 1; }
PORT=$(wg show ${INTERFACE} | grep "listening port" | cut -d ':' -f 2 | sed 's/^\s*//')
}

function genconfs {
cat << EOF > $DIR/${USERNAME}.conf
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = ${LOCALIP}/32
DNS = $(getifip $INTERFACE)

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
AllowedIPs = 0.0.0.0/0
Endpoint = $(getifip $MAINIF):$PORT
EOF

cat << EOF >> $BASEDIR/${INTERFACE}.conf
[Peer]
# $USERNAME
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = ${LOCALIP}/32
EOF

qrencode -s 6 -o $DIR/${USERNAME}.png < $DIR/${USERNAME}.conf
}

function genif {
mkdir -p -m 0700 $BASEDIR
if [[ -f $BASEDIR/${INTERFACE}.privatekey ]]; then
    echo -e "${YELLOW}\nA private key already exists in \"$BASEDIR\" for given interface. We'll use that key."
    echo -e "${YELLOW}If you prefer a new key please manually remove the file: \"$BASEDIR/${INTERFACE}.privatekey\""
    echo -e "${YELLOW}then try again.\n${DECOLOR}"
else
    umask 077; wg genkey | tee $BASEDIR/${INTERFACE}.privatekey | wg pubkey > $BASEDIR/${INTERFACE}.publickey
fi
cat << EOF > $BASEDIR/${INTERFACE}.conf
[Interface]
Address = ${IFLOCALIP}/24
ListenPort = ${PORT}
PrivateKey = $(cat $BASEDIR/${INTERFACE}.privatekey)
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $MAINIF -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $MAINIF -j MASQUERADE
EOF
}

function usage {
echo -e "\nUsage: $0 [adduser|deluser] USERNAME INTERFACE" >&2
echo -e "       $0 [addif|delif] INTERFACE" >&2
echo -e "       $0 install\n" >&2
exit 1
}

function removeuser {
ln=$(grep -nrm 1 "$USERNAME" $BASEDIR/${INTERFACE}.conf | cut -d : -f 1)
if ! [[ -z $ln ]]; then
    sed -i "$(($ln-1)),$(($ln+2))d" $BASEDIR/${INTERFACE}.conf
fi
}

function checkname {
if ! grep -e "# ${USERNAME}$" $BASEDIR/${INTERFACE}.conf; then
    echo ok
fi
}

function checkinterface {
if [[ -f $BASEDIR/${INTERFACE}.conf ]]; then
    echo "exists"
fi
}

function startmsg {
find_mainif
while :
do
    echo -e "\nInterface ${BLUE}[$MAINIF]${DECOLOR} with IP address \e[1;34m[$(getifip $MAINIF)]\e[0m \
is selected as main external interface for this server."
    read -p "Do you wish to continue? [Y/n]" START
    echo ""
    if [[ $START == "y" ]] || [[ $START == "Y" ]] || [[ $START == "" ]]; then break; fi
    if [[ $START == "n" ]] || [[ $START == "N" ]]; then exit; fi
done
}

function checkinstall {
wg -v > /dev/null 2>&1 || { echo -e "${RED}\n\"Wireguard\" is not installed." >&2;
echo -e "${RED}You can run this command to install it:\n" >&2;
echo -e "${RED}       $0 install\n${DECOLOR}" >&2;
exit 1; }
}
############################################################################
if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    usage
elif [[ $1 != "install" ]] && [[ $# -lt 2 ]]; then
    echo -e "${RED}\nInsufficient parameters.\n${DECOLOR}" >&2
    exit 1
fi

unset command_not_found_handle

checkuser

case $1 in
adduser | deluser)
    checkinstall
    USERNAME=$2
    INTERFACE=$3
    
    # Check if all parameters are present:
    if [[ -z $USERNAME ]] || [[ -z $INTERFACE ]]; then
        usage
    fi
    # Check if given INTERFACE exists:
    [[ $(checkinterface) == "exists" ]] || { echo -e "${RED}Invalid Interface.${DECOLOR}" >&2; exit 1; }    
    
    DIR=$BASEDIR/clients/$USERNAME
    
    case $1 in
    adduser)
        qrencode -V > /dev/null 2>&1 || { echo -e "${RED}\n\"qrencode\" is not installed.\n${DECOLOR}" >&2; exit 1; }
        startmsg
        readparams $1
        [[ $(checkname) == "ok" ]] || { echo -e "${RED}Username exists.${DECOLOR}" >&2; exit 1; }
        setvars
        genconfs
        systemctl reload-or-restart wg-quick@${INTERFACE}.service
        echo -e "${GREEN}\nUser added successfully!${DECOLOR}"
        echo -e "${GREEN}\nUse this config on your client side:\n${DECOLOR}"
        cat $DIR/${USERNAME}.conf
        echo -e "${GREEN}\nor this QR code:\n${DECOLOR}"
        qrencode -t UTF8 < $DIR/${USERNAME}.conf
        ;;
    deluser)
        read -p "Do you want to delete all user's configuration files? [y/N] " DEL
        if [[ $DEL == "y" ]] || [[ $DEL == "Y" ]]; then
            rm -rf $DIR;
        else
            echo -e "\nConfiguration files are remaining on the system.\n"
        fi
        removeuser
        systemctl reload-or-restart wg-quick@${INTERFACE}.service
        echo -e "${GREEN}User \"${USERNAME}\" removed successfully.${DECOLOR}"
        ;;
    esac
    ;;
addif | delif)
    checkinstall
    INTERFACE=$2
    if [[ -z $INTERFACE ]]; then
        usage
    fi
    case $1 in
    addif)
        startmsg
        readparams $1
        ! [[ $(checkinterface) == "exists" ]] || { echo "Interface exists."; exit 1; }
        genif
        systemctl enable wg-quick@${INTERFACE}.service --now
        echo -e "${GREEN}\nSuccessfully configured \"$INTERFACE\".\n"
        echo -e "${GREEN}\nInstall and configure ${BGREEN}\"Bind\"${GREEN} to \
listen on newly created interface if necessary.\n${DECOLOR}"
        ;;
    delif)
        systemctl stop wg-quick@${INTERFACE}.service
        read -p "Do you want to delete all interface configuration files? [y/N] " DEL
        if [[ $DEL == "y" ]] || [[ $DEL == "Y" ]]; then
            rm -f $BASEDIR/$INTERFACE*;
        else
            echo -e "\nConfiguration files are remaining on the system."
            echo -e "You can remove key files located in \"$BASEDIR\" manually.\n"
        fi
        rm -f $BASEDIR/${INTERFACE}.conf
        echo -e "${GREEN}\nSuccessfully removed \"$INTERFACE\".${DECOLOR}"
        ;;
    esac
    ;;
install)
    wg -v > /dev/null 2>&1 && { echo -e "${YELLOW}\nAlready installed!\n${DECOLOR}" >&2; exit 1; }
    enable_ipforward
    case $(os) in
    centos)
        install_pkg epel-release
        install_pkg elrepo-release
        install_pkg yum-plugin-elrepo
        install_pkg kmod-wireguard
        install_pkg wireguard-tools
        ;;
    ubuntu | debian)
        install_pkg wireguard
        ;;
    fedora)
        install_pkg wireguard-tools
        ;;
    *)
        echo -e "${RED}Automatic installation is not supported for your distribution." >&2
        echo -e "${RED}Please follow instructions here to install \"Wireguard\" manually:" >&2
        echo -e "${RED}https://www.wireguard.com/install/\n${DECOLOR}" >&2
        exit 1
        ;;
    esac
    ;;
*)
    usage
    ;;
esac