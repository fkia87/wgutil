#!/bin/bash

###########################################################################
#    A utility for creating and removing users and interfaces in a 
#    wireguard server.
#    Copyright (C) 2022  Farhad Kia
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
###########################################################################

# MAINIF is the name of server's main interface which is connected to the internet.
# DIR is related to clients. (client's folder)
# INTERFACE is the name of wireguard interface.

BASEDIR='/etc/wireguard'
declare -i PORT

function find_mainif {
iflist=( $(find /sys/class/net/ | rev | cut -d / -f1 | rev | sed '/^$/d') )
tmp=( $(ip route |grep default |sed -e 's/^\s*//;s/\s/\n/g;') )

for var in "${tmp[@]}"; do
    [[ " ${iflist[*]} " =~ " ${var} " ]] && MAINIF=$var
done
if [[ -z $MAINIF ]]; then
    echo -e "\nCouldn't determine the main interface on the system.\n"
    exit 1
fi
}

function readparams {
case $1 in
addif)
    read -p "Enter new IP for interface: " IFLOCALIP
    while ip -4 a | grep 'inet ' | awk {'print $2'} | grep $IFLOCALIP > /dev/null
    do
        echo -e "\nIP address in use. Try a different one.\n"
        read -p "Enter new IP for interface: " IFLOCALIP
    done
    read -p "Enter a new listening port: " PORT
    while ss --no-header -4lun | awk {'print$4'} | cut -d : -f2 | grep $PORT > /dev/null \
    || ! ((1024 < PORT && PORT < 65536))
    do
        echo -e "\nBusy or invalid port. Try a different port number.\n"
        read -p "Enter a new listening port: " PORT
    done
    ;;
adduser)
    read -p "Enter client Wireguard IP: [$(getlocalip)] " LOCALIP
    while grep "$LOCALIP" $BASEDIR/${INTERFACE}.conf > /dev/null && ! [[ -z $LOCALIP ]]
    do
        echo -e "\nIP address in use. Try a different one.\n"
        read -p "Enter client Wireguard IP: [$(getlocalip)] " LOCALIP
    done
    [[ -z $LOCALIP ]] && LOCALIP=$(getlocalip)
    ;;
esac
}

function getlocalip {
declare -i o1 o2 o3 o4
IFIP=$(grep 'Address' $BASEDIR/${INTERFACE}.conf | awk {'print$3'} | cut -d / -f1)
IFS=. read -r o1 o2 o3 o4 <<< $IFIP
((o4++))
while grep $o1.$o2.$o3.$o4/ $BASEDIR/${INTERFACE}.conf > /dev/null
do
    ((o4++))
done
echo $o1.$o2.$o3.$o4
}

function setvars {
mkdir -p $DIR

if ! test -f $DIR/${USERNAME}.key; then
    wg genkey | tee $DIR/${USERNAME}.key | wg pubkey | \
    tee $DIR/${USERNAME}.key.pub > /dev/null
else
    echo -e "\nA private key already exists in \"$DIR\" for given username. We'll use that key."
    echo -e "If you prefer a new key please manually remove the file: \"$DIR/${USERNAME}.key\""
    echo -e "then try again.\n"
    cat $DIR/${USERNAME}.key | wg pubkey | tee $DIR/${USERNAME}.key.pub > /dev/null
fi

CLIENT_PRIVATE_KEY=$(cat $DIR/${USERNAME}.key)
CLIENT_PUBLIC_KEY=$(cat $DIR/${USERNAME}.key.pub)
SERVER_PUBLIC_KEY=$(wg | grep "public key" | cut -d ':' -f 2 | sed 's/^\s//')
[[ $SERVER_PUBLIC_KEY != "" ]] || { echo "Error fetching server's public key."; exit 1; }
PORT=$(wg |grep "listening port" | cut -d ':' -f 2 | sed 's/^\s//')
}

function getifip {
# Returns IP of a given interface
ip -4 a show dev $1 | grep 'inet ' | head -n 1 | awk {'print $2'} | cut -d / -f 1
}

function genconfs {
cat << EOF > $DIR/${USERNAME}.conf
[Interface]
PrivateKey = $CLIENT_PRIVATE_KEY
Address = ${LOCALIP}/32
DNS = $(getifip $INTERFACE)

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
AllowedIPs = 0.0.0.0/0
Endpoint = $(getifip $MAINIF):$PORT
EOF

cat << EOF >> $BASEDIR/${INTERFACE}.conf
[Peer]
# $USERNAME
PublicKey = $CLIENT_PUBLIC_KEY
AllowedIPs = ${LOCALIP}/32
EOF

qrencode -s 6 -o $DIR/${USERNAME}.png < $DIR/${USERNAME}.conf
}

function genif {
mkdir -p -m 0700 $BASEDIR
if [[ -f $BASEDIR/${INTERFACE}.privatekey ]]; then
    echo -e "\nA private key already exists in \"$BASEDIR\" for given interface. We'll use that key."
    echo -e "If you prefer a new key please manually remove the file: \"$BASEDIR/${INTERFACE}.privatekey\""
    echo -e "then try again.\n"
else
    umask 077; wg genkey | tee $BASEDIR/${INTERFACE}.privatekey | wg pubkey > $BASEDIR/${INTERFACE}.publickey
fi
cat << EOF > $BASEDIR/${INTERFACE}.conf
[Interface]
Address = ${IFLOCALIP}/24
ListenPort = ${PORT}
PrivateKey = $(cat $BASEDIR/${INTERFACE}.privatekey)
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $MAINIF -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $MAINIF -j MASQUERADE
EOF
}

function servicerestart {
systemctl restart wg-quick@${INTERFACE}.service || { echo -e "\nProblem restarting Wireguard service.\n"; exit 1; }
}

function usage {
echo -e "\nUsage: $0 [adduser|deluser] USERNAME INTERFACE"
echo -e "       $0 [addif|delif] INTERFACE\n"
exit 1
}

function removeuser {
ln=$(grep -nrm 1 "$USERNAME" $BASEDIR/${INTERFACE}.conf | cut -d : -f 1)
if ! [[ -z $ln ]]; then
    sed -i "$(($ln-1)),$(($ln+2))d" $BASEDIR/${INTERFACE}.conf
fi
}

function checkname {
if ! grep -e "# ${USERNAME}$" $BASEDIR/${INTERFACE}.conf; then
    echo ok
fi
}

function checkinterface {
if [[ -f $BASEDIR/${INTERFACE}.conf ]]; then
    echo exists
fi
}

function startmsg {
find_mainif
while :
do
    echo -e "\nInterface \e[1;34m[$MAINIF]\e[0m with IP address \e[1;34m[$(getifip $MAINIF)]\e[0m \
is selected as main external interface for this server."
    read -p "Do you wish to continue? [Y/n]" START
    echo ""
    if [[ $START == "y" ]] || [[ $START == "Y" ]] || [[ $START == "" ]]; then break; fi
    if [[ $START == "n" ]] || [[ $START == "N" ]]; then exit; fi
done
}
############################################################################
if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    usage
    exit 0
elif [[ $# -lt 2 ]]; then
    echo -e "\nInsufficient parameters.\n"
    exit 1
fi

unset command_not_found_handle
wg -v > /dev/null 2>&1 || { echo -e "\nWireguard not installed."; \
echo -e "Please follow installation instructions here: \
https://www.wireguard.com/install/\n"; exit 1; }
qrencode -V > /dev/null 2>&1 || { echo -e "\nqrencode not installed.\n"; exit 1; }
[[ $UID == "0" ]] || { echo "You are not root."; exit 1; }

case $1 in
adduser | deluser)
    USERNAME=$2
    INTERFACE=$3
    
    # Check if all parameters are present:
    if [[ -z $USERNAME ]] || [[ -z $INTERFACE ]]; then
        usage
        exit 1
    fi
    # Check if given INTERFACE exists:
    [[ $(checkinterface) == "exists" ]] || { echo "Invalid Interface."; exit 1; }    
    
    DIR=$BASEDIR/clients/$USERNAME
    
    case $1 in
    adduser)
        startmsg
        readparams $1
        [[ $(checkname) == "ok" ]] || { echo "Username exists."; exit 1; }
        setvars
        genconfs
        servicerestart
        echo -e "\nUse this config on your client side:\n"
        cat $DIR/${USERNAME}.conf
        echo -e "\nor this QR code:\n"
        qrencode -t UTF8 < $DIR/${USERNAME}.conf
        ;;
    deluser)
        read -p "Do you want to delete all user's configuration files? [y/N] " DEL
        if [[ $DEL == "y" ]] || [[ $DEL == "Y" ]]; then
            rm -rf $DIR;
        else
            echo -e "\nConfiguration files are remaining on the system.\n"
        fi
        removeuser
        servicerestart
        echo -e "User \"${USERNAME}\" removed successfully."
        ;;
    esac
    ;;
addif | delif)
    INTERFACE=$2
    if [[ -z $INTERFACE ]]; then
        usage
        exit 1
    fi
    case $1 in
    addif)
        startmsg
        readparams $1
        ! [[ $(checkinterface) == "exists" ]] || { echo "Interface exists."; exit 1; }
        genif
        servicerestart
        echo -e "\nSuccessfully configured \"$INTERFACE\".\n"
        ;;
    delif)
        read -p "Do you want to delete all interface configuration files? [y/N] " DEL
        if [[ $DEL == "y" ]] || [[ $DEL == "Y" ]]; then
            rm -f $BASEDIR/$INTERFACE*;
        else
            echo -e "\nConfiguration files are remaining on the system."
            echo -e "You can remove key files located in \"$BASEDIR\" manually.\n"
        fi
        systemctl stop wg-quick@${INTERFACE}.service
        rm -f $BASEDIR/${INTERFACE}.conf
        echo -e "\nSuccessfully removed \"$INTERFACE\"."
        ;;
    esac
    ;;
*)
    usage
    ;;
esac

